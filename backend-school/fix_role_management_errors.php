<?php

/**
 * Role Management Error Fix Script
 * 
 * This script fixes common issues that cause 500 errors in role management
 * Run this from the Laravel root directory: php fix_role_management_errors.php
 */

require_once __DIR__ . '/vendor/autoload.php';

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Artisan;

// Bootstrap Laravel
$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "Role Management Error Fix Script\n";
echo "================================\n\n";

try {
    // Step 1: Check database connection
    echo "1. Checking database connection...\n";
    DB::connection()->getPdo();
    echo "   ✓ Database connection successful\n\n";
    
    // Step 2: Create missing tables
    echo "2. Creating missing tables...\n";
    
    // Create tenants table if it doesn't exist
    if (!Schema::hasTable('tenants')) {
        echo "   Creating tenants table...\n";
        Schema::create('tenants', function ($table) {\n            $table->id();\n            $table->string('name');\n            $table->string('slug')->unique();\n            $table->string('domain')->nullable();\n            $table->string('database_name')->nullable();\n            $table->enum('status', ['pending', 'active', 'suspended', 'cancelled'])->default('pending');\n            $table->unsignedBigInteger('subscription_plan_id')->nullable();\n            $table->enum('subscription_status', ['active', 'expired', 'cancelled', 'suspended'])->default('active');\n            $table->timestamp('subscription_expires_at')->nullable();\n            $table->string('billing_email')->nullable();\n            $table->text('billing_address')->nullable();\n            $table->enum('billing_cycle', ['monthly', 'yearly'])->default('monthly');\n            $table->boolean('auto_renew')->default(true);\n            $table->string('contact_person')->nullable();\n            $table->string('contact_email')->nullable();\n            $table->string('contact_phone')->nullable();\n            $table->json('settings')->nullable();\n            $table->json('features_enabled')->nullable();\n            $table->bigInteger('storage_used')->default(0);\n            $table->bigInteger('storage_limit')->default(1073741824); // 1GB\n            $table->integer('users_limit')->default(100);\n            $table->boolean('is_trial')->default(false);\n            $table->timestamp('trial_expires_at')->nullable();\n            $table->timestamp('last_activity_at')->nullable();\n            $table->unsignedBigInteger('created_by')->nullable();\n            $table->unsignedBigInteger('approved_by')->nullable();\n            $table->timestamp('approved_at')->nullable();\n            $table->timestamp('suspended_at')->nullable();\n            $table->unsignedBigInteger('suspended_by')->nullable();\n            $table->text('suspension_reason')->nullable();\n            $table->timestamp('reactivated_at')->nullable();\n            $table->unsignedBigInteger('reactivated_by')->nullable();\n            $table->unsignedBigInteger('deleted_by')->nullable();\n            $table->json('metadata')->nullable();\n            $table->timestamps();\n            $table->softDeletes();\n            \n            $table->index(['status', 'subscription_status']);\n            $table->index('subscription_expires_at');\n        });\n        echo "   ✓ Tenants table created\n";\n    } else {\n        echo "   ✓ Tenants table already exists\n";\n    }\n    \n    // Create roles table if it doesn't exist\n    if (!Schema::hasTable('roles')) {\n        echo "   Creating roles table...\n";\n        Schema::create('roles', function ($table) {\n            $table->id();\n            $table->string('name');\n            $table->string('slug');\n            $table->text('description')->nullable();\n            $table->boolean('is_default')->default(false);\n            $table->boolean('is_system')->default(false);\n            $table->unsignedBigInteger('tenant_id')->nullable();\n            $table->json('permissions')->nullable();\n            $table->json('module_access')->nullable();\n            $table->boolean('is_active')->default(true);\n            $table->timestamps();\n            $table->softDeletes();\n            \n            $table->index(['slug', 'tenant_id']);\n            $table->index(['is_system', 'is_active']);\n            $table->index('tenant_id');\n            \n            // Make slug unique per tenant (allow same slug for different tenants)\n            $table->unique(['slug', 'tenant_id']);\n        });\n        echo "   ✓ Roles table created\n";\n    } else {\n        echo "   ✓ Roles table already exists\n";\n    }\n    \n    // Create permissions table if it doesn't exist\n    if (!Schema::hasTable('permissions')) {\n        echo "   Creating permissions table...\n";\n        Schema::create('permissions', function ($table) {\n            $table->id();\n            $table->string('name');\n            $table->string('slug')->unique();\n            $table->text('description')->nullable();\n            $table->string('module')->nullable();\n            $table->string('category')->nullable();\n            $table->boolean('is_active')->default(true);\n            $table->timestamps();\n            $table->softDeletes();\n            \n            $table->index(['module', 'category']);\n            $table->index('is_active');\n        });\n        echo "   ✓ Permissions table created\n";\n    } else {\n        echo "   ✓ Permissions table already exists\n";\n    }\n    \n    // Create tenant_permissions table if it doesn't exist\n    if (!Schema::hasTable('tenant_permissions')) {\n        echo "   Creating tenant_permissions table...\n";\n        Schema::create('tenant_permissions', function ($table) {\n            $table->id();\n            $table->unsignedBigInteger('tenant_id');\n            $table->string('role_slug');\n            $table->json('permissions')->nullable();\n            $table->json('module_access')->nullable();\n            $table->json('custom_permissions')->nullable();\n            $table->boolean('is_active')->default(true);\n            $table->timestamps();\n            $table->softDeletes();\n            \n            $table->index(['tenant_id', 'role_slug']);\n            $table->index('is_active');\n            \n            $table->unique(['tenant_id', 'role_slug']);\n        });\n        echo "   ✓ Tenant permissions table created\n";\n    } else {\n        echo "   ✓ Tenant permissions table already exists\n";\n    }\n    \n    // Create role_permissions table if it doesn't exist\n    if (!Schema::hasTable('role_permissions')) {\n        echo "   Creating role_permissions table...\n";\n        Schema::create('role_permissions', function ($table) {\n            $table->id();\n            $table->unsignedBigInteger('role_id');\n            $table->unsignedBigInteger('permission_id');\n            $table->timestamps();\n            \n            $table->unique(['role_id', 'permission_id']);\n            $table->index('role_id');\n            $table->index('permission_id');\n        });\n        echo "   ✓ Role permissions table created\n";\n    } else {\n        echo "   ✓ Role permissions table already exists\n";\n    }\n    \n    echo "\n";\n    \n    // Step 3: Create default roles\n    echo "3. Creating default roles...\n";\n    \n    $defaultRoles = [\n        [\n            'name' => 'Super Administrator',\n            'slug' => 'SuperAdmin',\n            'description' => 'Full system access with tenant management capabilities',\n            'is_default' => true,\n            'is_system' => true,\n            'tenant_id' => null,\n            'permissions' => json_encode(['*']),\n            'module_access' => json_encode(['*']),\n            'is_active' => true\n        ],\n        [\n            'name' => 'School Administrator',\n            'slug' => 'Admin',\n            'description' => 'Full access to school management features',\n            'is_default' => true,\n            'is_system' => true,\n            'tenant_id' => null,\n            'permissions' => json_encode([\n                'dashboard.view', 'students.manage', 'teachers.manage', 'classes.manage',\n                'subjects.manage', 'attendance.manage', 'exams.manage', 'fees.manage',\n                'reports.view', 'settings.manage', 'users.manage', 'library.manage',\n                'transport.manage', 'hr.manage', 'idcard.manage'\n            ]),\n            'module_access' => json_encode([\n                'dashboard', 'students', 'teachers', 'classes', 'subjects',\n                'attendance', 'exams', 'fees', 'reports', 'settings',\n                'users', 'library', 'transport', 'hr', 'idcard'\n            ]),\n            'is_active' => true\n        ],\n        [\n            'name' => 'Teacher',\n            'slug' => 'Teacher',\n            'description' => 'Access to teaching and student management features',\n            'is_default' => true,\n            'is_system' => true,\n            'tenant_id' => null,\n            'permissions' => json_encode([\n                'dashboard.view', 'students.view', 'students.attendance', 'classes.view',\n                'subjects.view', 'attendance.manage', 'exams.manage', 'reports.view'\n            ]),\n            'module_access' => json_encode([\n                'dashboard', 'students', 'classes', 'subjects', 'attendance', 'exams', 'reports'\n            ]),\n            'is_active' => true\n        ],\n        [\n            'name' => 'Student',\n            'slug' => 'Student',\n            'description' => 'Access to student portal features',\n            'is_default' => true,\n            'is_system' => true,\n            'tenant_id' => null,\n            'permissions' => json_encode([\n                'dashboard.view', 'profile.view', 'attendance.view', 'exams.view',\n                'results.view', 'library.view', 'transport.view'\n            ]),\n            'module_access' => json_encode([\n                'dashboard', 'attendance', 'exams', 'library', 'transport'\n            ]),\n            'is_active' => true\n        ],\n        [\n            'name' => 'Parent/Guardian',\n            'slug' => 'Parent',\n            'description' => 'Access to monitor children\\'s academic progress',\n            'is_default' => true,\n            'is_system' => true,\n            'tenant_id' => null,\n            'permissions' => json_encode([\n                'dashboard.view', 'children.view', 'attendance.view', 'exams.view',\n                'results.view', 'fees.view', 'communication.view'\n            ]),\n            'module_access' => json_encode([\n                'dashboard', 'students', 'attendance', 'exams', 'fees'\n            ]),\n            'is_active' => true\n        ],\n        [\n            'name' => 'Accountant',\n            'slug' => 'Accountant',\n            'description' => 'Access to financial and fee management features',\n            'is_default' => true,\n            'is_system' => true,\n            'tenant_id' => null,\n            'permissions' => json_encode([\n                'dashboard.view', 'fees.manage', 'reports.financial', 'students.view',\n                'billing.manage', 'invoices.manage'\n            ]),\n            'module_access' => json_encode([\n                'dashboard', 'fees', 'reports', 'students'\n            ]),\n            'is_active' => true\n        ]\n    ];\n    \n    foreach ($defaultRoles as $roleData) {\n        try {\n            $existing = DB::table('roles')\n                         ->where('slug', $roleData['slug'])\n                         ->where('tenant_id', null)\n                         ->first();\n            \n            if (!$existing) {\n                DB::table('roles')->insert(array_merge($roleData, [\n                    'created_at' => now(),\n                    'updated_at' => now()\n                ]));\n                echo "   ✓ Created role: {$roleData['name']}\n";\n            } else {\n                echo "   ✓ Role already exists: {$roleData['name']}\n";\n            }\n        } catch (Exception $e) {\n            echo "   ✗ Failed to create role {$roleData['name']}: " . $e->getMessage() . "\n";\n        }\n    }\n    \n    echo "\n";\n    \n    // Step 4: Clear caches\n    echo "4. Clearing caches...\n";\n    try {\n        Artisan::call('config:clear');\n        echo "   ✓ Config cache cleared\n";\n        \n        Artisan::call('route:clear');\n        echo "   ✓ Route cache cleared\n";\n        \n        Artisan::call('view:clear');\n        echo "   ✓ View cache cleared\n";\n        \n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n            echo "   ✓ OPCache cleared\n";\n        }\n    } catch (Exception $e) {\n        echo "   ⚠ Cache clearing failed: " . $e->getMessage() . "\n";\n    }\n    \n    echo "\n";\n    \n    // Step 5: Test the endpoints\n    echo "5. Testing role management endpoints...\n";\n    \n    try {\n        // Test basic role retrieval\n        $roles = DB::table('roles')->where('is_system', true)->get();\n        echo "   ✓ Found " . $roles->count() . " system roles in database\n";\n        \n        // Test controller instantiation\n        $controller = new \\App\\Modules\\SuperAdmin\\Controllers\\RolePermissionController();\n        echo "   ✓ Role controller can be instantiated\n";\n        \n        // Test basic model operations\n        $roleModel = new \\App\\Modules\\SuperAdmin\\Models\\Role();\n        $defaultRoles = $roleModel::getDefaultRoles();\n        echo "   ✓ Role model methods work, found " . count($defaultRoles) . " default role definitions\n";\n        \n    } catch (Exception $e) {\n        echo "   ✗ Endpoint test failed: " . $e->getMessage() . "\n";\n    }\n    \n    echo "\n✓ Role management error fix completed!\n";\n    echo "\nNext steps:\n";\n    echo "1. Test the endpoints in your browser or API client:\n";\n    echo "   - GET /api/superadmin/roles\n";\n    echo "   - GET /api/superadmin/roles/statistics\n";\n    echo "   - GET /api/superadmin/permissions/modules\n";\n    echo "\n2. If you still get 500 errors, check:\n";\n    echo "   - Laravel logs in storage/logs/laravel.log\n";\n    echo "   - Web server error logs\n";\n    echo "   - Database permissions\n";\n    echo "   - PHP error logs\n";\n    echo "\n3. Make sure your .env file has correct database settings\n";\n    \n} catch (Exception $e) {\n    echo "✗ Fatal Error: " . $e->getMessage() . "\n";\n    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";\n}